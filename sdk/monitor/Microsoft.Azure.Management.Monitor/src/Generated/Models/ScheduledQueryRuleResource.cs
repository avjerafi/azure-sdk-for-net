// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Monitor.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The scheduled query rule resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ScheduledQueryRuleResource : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the ScheduledQueryRuleResource class.
        /// </summary>
        public ScheduledQueryRuleResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScheduledQueryRuleResource class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="kind">Indicates the type of scheduled query rule. The
        /// default is LogAlert. Possible values include: 'LogAlert',
        /// 'LogToMetric'</param>
        /// <param name="etag">The etag field is *not* required. If it is
        /// provided in the response body, it must also be provided as a header
        /// per the normal etag convention.  Entity tags are used for comparing
        /// two or more entities from the same requested resource. HTTP/1.1
        /// uses entity tags in the etag (section 14.19), If-Match (section
        /// 14.24), If-None-Match (section 14.26), and If-Range (section 14.27)
        /// header fields. </param>
        /// <param name="systemData">SystemData of ScheduledQueryRule.</param>
        /// <param name="createdWithApiVersion">The api-version used when
        /// creating this alert rule</param>
        /// <param name="isLegacyLogAnalyticsRule">True if alert rule is legacy
        /// Log Analytic rule</param>
        /// <param name="description">The description of the scheduled query
        /// rule.</param>
        /// <param name="displayName">The display name of the alert
        /// rule</param>
        /// <param name="severity">Severity of the alert. Should be an integer
        /// between [0-4]. Value of 0 is severest. Relevant and required only
        /// for rules of the kind LogAlert.</param>
        /// <param name="enabled">The flag which indicates whether this
        /// scheduled query rule is enabled. Value should be true or
        /// false</param>
        /// <param name="scopes">The list of resource id's that this scheduled
        /// query rule is scoped to.</param>
        /// <param name="evaluationFrequency">How often the scheduled query
        /// rule is evaluated represented in ISO 8601 duration format. Relevant
        /// and required only for rules of the kind LogAlert.</param>
        /// <param name="windowSize">The period of time (in ISO 8601 duration
        /// format) on which the Alert query will be executed (bin size).
        /// Relevant and required only for rules of the kind LogAlert.</param>
        /// <param name="overrideQueryTimeRange">If specified then overrides
        /// the query time range (default is
        /// WindowSize*NumberOfEvaluationPeriods). Relevant only for rules of
        /// the kind LogAlert.</param>
        /// <param name="targetResourceTypes">List of resource type of the
        /// target resource(s) on which the alert is created/updated. For
        /// example if the scope is a resource group and targetResourceTypes is
        /// Microsoft.Compute/virtualMachines, then a different alert will be
        /// fired for each virtual machine in the resource group which meet the
        /// alert criteria. Relevant only for rules of the kind
        /// LogAlert</param>
        /// <param name="criteria">The rule criteria that defines the
        /// conditions of the scheduled query rule.</param>
        /// <param name="muteActionsDuration">Mute actions for the chosen
        /// period of time (in ISO 8601 duration format) after the alert is
        /// fired. Relevant only for rules of the kind LogAlert.</param>
        /// <param name="actions">Actions to invoke when the alert
        /// fires.</param>
        /// <param name="isWorkspaceAlertsStorageConfigured">The flag which
        /// indicates whether this scheduled query rule has been configured to
        /// be stored in the customer's storage. The default is false.</param>
        /// <param name="checkWorkspaceAlertsStorageConfigured">The flag which
        /// indicates whether this scheduled query rule should be stored in the
        /// customer's storage. The default is false. Relevant only for rules
        /// of the kind LogAlert.</param>
        /// <param name="skipQueryValidation">The flag which indicates whether
        /// the provided query should be validated or not. The default is
        /// false. Relevant only for rules of the kind LogAlert.</param>
        /// <param name="autoMitigate">The flag that indicates whether the
        /// alert should be automatically resolved or not. The default is true.
        /// Relevant only for rules of the kind LogAlert.</param>
        public ScheduledQueryRuleResource(string location, string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string kind = default(string), string etag = default(string), SystemData systemData = default(SystemData), string createdWithApiVersion = default(string), bool? isLegacyLogAnalyticsRule = default(bool?), string description = default(string), string displayName = default(string), double? severity = default(double?), bool? enabled = default(bool?), IList<string> scopes = default(IList<string>), System.TimeSpan? evaluationFrequency = default(System.TimeSpan?), System.TimeSpan? windowSize = default(System.TimeSpan?), System.TimeSpan? overrideQueryTimeRange = default(System.TimeSpan?), IList<string> targetResourceTypes = default(IList<string>), ScheduledQueryRuleCriteria criteria = default(ScheduledQueryRuleCriteria), System.TimeSpan? muteActionsDuration = default(System.TimeSpan?), Actions actions = default(Actions), bool? isWorkspaceAlertsStorageConfigured = default(bool?), bool? checkWorkspaceAlertsStorageConfigured = default(bool?), bool? skipQueryValidation = default(bool?), bool? autoMitigate = default(bool?))
            : base(location, id, name, type, tags)
        {
            Kind = kind;
            Etag = etag;
            SystemData = systemData;
            CreatedWithApiVersion = createdWithApiVersion;
            IsLegacyLogAnalyticsRule = isLegacyLogAnalyticsRule;
            Description = description;
            DisplayName = displayName;
            Severity = severity;
            Enabled = enabled;
            Scopes = scopes;
            EvaluationFrequency = evaluationFrequency;
            WindowSize = windowSize;
            OverrideQueryTimeRange = overrideQueryTimeRange;
            TargetResourceTypes = targetResourceTypes;
            Criteria = criteria;
            MuteActionsDuration = muteActionsDuration;
            Actions = actions;
            IsWorkspaceAlertsStorageConfigured = isWorkspaceAlertsStorageConfigured;
            CheckWorkspaceAlertsStorageConfigured = checkWorkspaceAlertsStorageConfigured;
            SkipQueryValidation = skipQueryValidation;
            AutoMitigate = autoMitigate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets indicates the type of scheduled query rule. The
        /// default is LogAlert. Possible values include: 'LogAlert',
        /// 'LogToMetric'
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Gets the etag field is *not* required. If it is provided in the
        /// response body, it must also be provided as a header per the normal
        /// etag convention.  Entity tags are used for comparing two or more
        /// entities from the same requested resource. HTTP/1.1 uses entity
        /// tags in the etag (section 14.19), If-Match (section 14.24),
        /// If-None-Match (section 14.26), and If-Range (section 14.27) header
        /// fields.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; private set; }

        /// <summary>
        /// Gets systemData of ScheduledQueryRule.
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; private set; }

        /// <summary>
        /// Gets the api-version used when creating this alert rule
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdWithApiVersion")]
        public string CreatedWithApiVersion { get; private set; }

        /// <summary>
        /// Gets true if alert rule is legacy Log Analytic rule
        /// </summary>
        [JsonProperty(PropertyName = "properties.isLegacyLogAnalyticsRule")]
        public bool? IsLegacyLogAnalyticsRule { get; private set; }

        /// <summary>
        /// Gets or sets the description of the scheduled query rule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the display name of the alert rule
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets severity of the alert. Should be an integer between
        /// [0-4]. Value of 0 is severest. Relevant and required only for rules
        /// of the kind LogAlert.
        /// </summary>
        [JsonProperty(PropertyName = "properties.severity")]
        public double? Severity { get; set; }

        /// <summary>
        /// Gets or sets the flag which indicates whether this scheduled query
        /// rule is enabled. Value should be true or false
        /// </summary>
        [JsonProperty(PropertyName = "properties.enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or sets the list of resource id's that this scheduled query
        /// rule is scoped to.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scopes")]
        public IList<string> Scopes { get; set; }

        /// <summary>
        /// Gets or sets how often the scheduled query rule is evaluated
        /// represented in ISO 8601 duration format. Relevant and required only
        /// for rules of the kind LogAlert.
        /// </summary>
        [JsonProperty(PropertyName = "properties.evaluationFrequency")]
        public System.TimeSpan? EvaluationFrequency { get; set; }

        /// <summary>
        /// Gets or sets the period of time (in ISO 8601 duration format) on
        /// which the Alert query will be executed (bin size). Relevant and
        /// required only for rules of the kind LogAlert.
        /// </summary>
        [JsonProperty(PropertyName = "properties.windowSize")]
        public System.TimeSpan? WindowSize { get; set; }

        /// <summary>
        /// Gets or sets if specified then overrides the query time range
        /// (default is WindowSize*NumberOfEvaluationPeriods). Relevant only
        /// for rules of the kind LogAlert.
        /// </summary>
        [JsonProperty(PropertyName = "properties.overrideQueryTimeRange")]
        public System.TimeSpan? OverrideQueryTimeRange { get; set; }

        /// <summary>
        /// Gets or sets list of resource type of the target resource(s) on
        /// which the alert is created/updated. For example if the scope is a
        /// resource group and targetResourceTypes is
        /// Microsoft.Compute/virtualMachines, then a different alert will be
        /// fired for each virtual machine in the resource group which meet the
        /// alert criteria. Relevant only for rules of the kind LogAlert
        /// </summary>
        [JsonProperty(PropertyName = "properties.targetResourceTypes")]
        public IList<string> TargetResourceTypes { get; set; }

        /// <summary>
        /// Gets or sets the rule criteria that defines the conditions of the
        /// scheduled query rule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.criteria")]
        public ScheduledQueryRuleCriteria Criteria { get; set; }

        /// <summary>
        /// Gets or sets mute actions for the chosen period of time (in ISO
        /// 8601 duration format) after the alert is fired. Relevant only for
        /// rules of the kind LogAlert.
        /// </summary>
        [JsonProperty(PropertyName = "properties.muteActionsDuration")]
        public System.TimeSpan? MuteActionsDuration { get; set; }

        /// <summary>
        /// Gets or sets actions to invoke when the alert fires.
        /// </summary>
        [JsonProperty(PropertyName = "properties.actions")]
        public Actions Actions { get; set; }

        /// <summary>
        /// Gets the flag which indicates whether this scheduled query rule has
        /// been configured to be stored in the customer's storage. The default
        /// is false.
        /// </summary>
        [JsonProperty(PropertyName = "properties.isWorkspaceAlertsStorageConfigured")]
        public bool? IsWorkspaceAlertsStorageConfigured { get; private set; }

        /// <summary>
        /// Gets or sets the flag which indicates whether this scheduled query
        /// rule should be stored in the customer's storage. The default is
        /// false. Relevant only for rules of the kind LogAlert.
        /// </summary>
        [JsonProperty(PropertyName = "properties.checkWorkspaceAlertsStorageConfigured")]
        public bool? CheckWorkspaceAlertsStorageConfigured { get; set; }

        /// <summary>
        /// Gets or sets the flag which indicates whether the provided query
        /// should be validated or not. The default is false. Relevant only for
        /// rules of the kind LogAlert.
        /// </summary>
        [JsonProperty(PropertyName = "properties.skipQueryValidation")]
        public bool? SkipQueryValidation { get; set; }

        /// <summary>
        /// Gets or sets the flag that indicates whether the alert should be
        /// automatically resolved or not. The default is true. Relevant only
        /// for rules of the kind LogAlert.
        /// </summary>
        [JsonProperty(PropertyName = "properties.autoMitigate")]
        public bool? AutoMitigate { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
